[{"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/index.js":"1","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/App.js":"2","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Details/Details.jsx":"3","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Details/styles.js":"4","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/styles.js":"5","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/Main.jsx":"6","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/styles.js":"7","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/Form/Form.jsx":"8","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/Form/styles.js":"9","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/List/List.jsx":"10","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/List/styles.js":"11","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/context/context.js":"12","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/context/contextReducer.js":"13","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/constants/categories.js":"14","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/utils/formatDate.js":"15","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/useTransactions.js":"16"},{"size":431,"mtime":1609330262954,"results":"17","hashOfConfig":"18"},{"size":1043,"mtime":1609332236577,"results":"19","hashOfConfig":"18"},{"size":707,"mtime":1609324297521,"results":"20","hashOfConfig":"18"},{"size":243,"mtime":1609236543902,"results":"21","hashOfConfig":"18"},{"size":644,"mtime":1609237348772,"results":"22","hashOfConfig":"18"},{"size":1308,"mtime":1609338391038,"results":"23","hashOfConfig":"18"},{"size":542,"mtime":1609238710868,"results":"24","hashOfConfig":"18"},{"size":4881,"mtime":1609337170891,"results":"25","hashOfConfig":"18"},{"size":258,"mtime":1609242798930,"results":"26","hashOfConfig":"18"},{"size":1577,"mtime":1609320121225,"results":"27","hashOfConfig":"18"},{"size":433,"mtime":1609242803847,"results":"28","hashOfConfig":"18"},{"size":1016,"mtime":1609338161317,"results":"29","hashOfConfig":"18"},{"size":735,"mtime":1609337307620,"results":"30","hashOfConfig":"18"},{"size":1698,"mtime":1609321270703,"results":"31","hashOfConfig":"18"},{"size":359,"mtime":1609323696980,"results":"32","hashOfConfig":"18"},{"size":1158,"mtime":1609324203157,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1tiyij",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/index.js",[],["68","69"],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/App.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Details/Details.jsx",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Details/styles.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/styles.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/Main.jsx",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/styles.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/Form/Form.jsx",["70"],"import React, { useState, useEffect, useContext } from 'react';\nimport { TextField, Typography, Grid, Button, InputLabel, Select, MenuItem, FormControl } from '@material-ui/core';\nimport { BadgetTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useSpeechContext } from '@speechly/react-client';\n\nimport useStyles from './styles';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport formatDate from '../../../utils/formatDate';\n\nconst initialState = {\n    amount: '',\n    category: '',\n    type: 'Income',\n    date: formatDate(new Date()),\n}\n\nconst Form = () => {\n    const classes = useStyles();\n    const [formData, setFormData] = useState(initialState);\n    const { addTransaction } = useContext(BadgetTrackerContext);\n    const { segment } = useSpeechContext();\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories\n\n    const createTransaction = () => {\n        if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n        const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() };\n        addTransaction(transaction);\n        setFormData(initialState);\n    }\n\n    useEffect(() => {\n        if (segment) {\n            if (segment.intent.intent === 'add_expense') {\n                setFormData({ ...formData, type: 'Expense' });\n            } else if (segment.intent.intent === 'add_income') {\n                setFormData({ ...formData, type: \"Income\" });\n            } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n                return createTransaction();\n            } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n                return setFormData(initialState);\n            }\n\n            segment.entities.forEach(entity => {\n                const category = `${entity.value.charAt(0)}${entity.value.slice(1).toLowerCase()}`\n                switch (entity.type) {\n                    case 'amount':\n                        setFormData({ ...formData, amount: entity.value });\n                        break;\n                    case 'category':\n                        if (incomeCategories.map(iC => iC.type).includes(category)) {\n                            setFormData({ ...formData, type: 'Income', category });\n                        } else if (expenseCategories.map(eC => eC.type).includes(category)) {\n                            setFormData({ ...formData, type: 'Expense', category });\n                        }\n                        break;\n                    case 'date':\n                        setFormData({ ...formData, date: entity.value });\n                        break;\n                    default:\n                        break;\n                }\n            })\n\n            if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n                createTransaction();\n            }\n        }\n    }, [segment])\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Typography align=\"center\" variant=\"subtitle2\" gutterButtom>\n                    {segment && segment.words.map(w => w.value).join(' ')}\n                </Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Type</InputLabel>\n                    <Select value={formData.type} onChange={e => setFormData({ ...formData, type: e.target.value })}>\n                        <MenuItem value=\"Income\">Income</MenuItem>\n                        <MenuItem value=\"Expense\">Expense</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Select value={formData.category} onChange={e => setFormData({ ...formData, category: e.target.value })}>\n                        {\n                            selectedCategories.map(c => (<MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>))\n                        }\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField type=\"number\" label=\"Amount\" fullWidth value={formData.amount} onChange={e => setFormData({ ...formData, amount: e.target.value })} />\n            </Grid>\n            <Grid item xs={6}>\n                <TextField type=\"date\" label=\"Date\" fullWidth value={formData.date} onChange={e => setFormData({ ...formData, date: formatDate(e.target.value) })} />\n            </Grid>\n            <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\n        </Grid>\n    )\n}\n\nexport default Form\n","/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/Form/styles.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/List/List.jsx",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/components/Main/List/styles.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/context/context.js",["71"],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/context/contextReducer.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/constants/categories.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/utils/formatDate.js",[],"/Users/saarcohen/Projects/JavaScript/sc-badget-tracker/src/useTransactions.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":69,"column":8,"nodeType":"78","endLine":69,"endColumn":17,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":10,"nodeType":"82","messageId":"83","endLine":1,"endColumn":28},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["86"],"no-unused-vars","'AssignmentReturned' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"89","text":"90"},[3017,3026],"[createTransaction, formData, segment]"]